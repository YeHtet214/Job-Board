var b=Object.defineProperty;var y=(r,t,e)=>t in r?b(r,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):r[t]=e;var d=(r,t,e)=>y(r,typeof t!="symbol"?t+"":t,e);import{a9 as h,b as c,a1 as u,a2 as v,a3 as l}from"./index-p34BVjv6.js";class p extends h{constructor(){super(...arguments);d(this,"endpoints",{BASE:"/saved-jobs",CHECK:e=>`/saved-jobs/check/${e}`,REMOVE:e=>`/saved-jobs/${e}`,CHECK_BATCH:"/saved-jobs/check-batch"})}async getSavedJobs(){try{return(await this.get(this.endpoints.BASE)).data.data}catch(e){throw console.error("Failed to get saved jobs:",e),e}}async isJobSaved(e){try{return(await this.get(this.endpoints.CHECK(e))).data.data}catch(s){return console.error(`Failed to check if job ${e} is saved:`,s),{isSaved:!1,savedJobId:null}}}async areJobsSaved(e){if(!e.length)return{};try{return(await this.post(this.endpoints.CHECK_BATCH,{jobIds:e})).data.data}catch(s){return console.error("Failed to check if job saved:",s),s}}async saveJob(e){return(await this.post(this.endpoints.BASE,{jobId:e})).data.data}async removeSavedJob(e){await this.delete(this.endpoints.REMOVE(e))}}const n=new p,a={all:["savedJobs"],single:r=>["jobSaved",r],batch:r=>["jobsSaved",r.sort().join(",")]},E=()=>{const{toast:r}=c();return u({queryKey:a.all,queryFn:async()=>{try{return await n.getSavedJobs()}catch(t){throw console.error("Error fetching saved jobs:",t),r({title:"Error",description:"Failed to load saved jobs",variant:"destructive"}),t}}})},J=(r=[])=>{const t=[...new Set(r)].filter(Boolean);return u({queryKey:a.batch(t),queryFn:async()=>{try{return await n.areJobsSaved(t)}catch(e){return console.error("Error checking saved job status:",e),{}}},enabled:t.length>0})},g=()=>{const r=v(),{toast:t}=c();return l({mutationFn:async e=>{try{return await n.saveJob(e)}catch(s){throw console.error("Error saving job:",s),s}},onSuccess:(e,s)=>{r.invalidateQueries({queryKey:a.all}),r.invalidateQueries({queryKey:a.single(s)}),r.invalidateQueries({predicate:o=>o.queryKey[0]==="jobsSaved"&&typeof o.queryKey[1]=="string"&&o.queryKey[1].includes(s)}),t({title:"Job Saved",description:"This job has been added to your saved jobs."})},onError:e=>{console.error("Error in save job mutation:",e),t({title:"Error",description:"Failed to save job. Please try again.",variant:"destructive"})}})},K=()=>{const r=v(),{toast:t}=c();return l({mutationFn:async({savedJobId:e,jobId:s})=>{try{return await n.removeSavedJob(e),{savedJobId:e,jobId:s}}catch(o){throw console.error("Error removing saved job:",o),o}},onSuccess:(e,s)=>{const{jobId:o}=s;r.invalidateQueries({queryKey:a.all}),r.invalidateQueries({queryKey:a.single(o)}),r.invalidateQueries({predicate:i=>i.queryKey[0]==="jobsSaved"&&typeof i.queryKey[1]=="string"&&i.queryKey[1].includes(o)}),t({title:"Job Removed",description:"Job has been removed from your saved jobs."})},onError:e=>{console.error("Error in remove saved job mutation:",e),t({title:"Error",description:"Failed to remove job from saved jobs. Please try again.",variant:"destructive"})}})};export{K as a,g as b,J as c,E as u};
